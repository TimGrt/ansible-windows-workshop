{"config":{"lang":["en"],"separator":"[\\s]","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ansible Windows Enablement Workshop","text":"<p>Welcome to the Ansible Workshop!</p> <p> </p> <p>Ansible is a radically simple IT automation system. It handles configuration management, application deployment, cloud provisioning, ad-hoc task execution, network automation, and multi-node orchestration.  </p> <p>You will learn about Ansible:</p> <ol> <li>starting with the basics of understanding foundational command line activities.</li> <li>applying what you\u2019ve learned to the Ansible automation controller for your enterprise use cases.</li> </ol> <p>You\u2019ll start off by writing your first steps with Ansible Ad-hoc commands, playbooks, working with variables and much more. Next you\u2019ll get started on automation controller, understand inventory and credential management, projects, job templates, surveys, workflows and more.</p> <p>After finishing this lab you are ready to start using Ansible for your automation requirements.</p>"},{"location":"#time-planning","title":"Time planning","text":"<p>The time required to do the workshops strongly depends on multiple factors: the length of the workshop. the number of participants, how familiar you are with Linux in general and how much discussions are done in between.</p> <p>Having said that, the exercises themselves should take roughly 4-5 hours.  </p>"},{"location":"#lab-overview","title":"Lab Overview","text":"High-Level overview of Lab hosts"},{"location":"preparation/","title":"Preparation","text":""},{"location":"preparation/#configure-dev-environment","title":"Configure Dev Environment","text":"<p>We will be using Visual Studio Code (VScode) as our IDE for Ansible development, we will connect VScode to a (Linux) development host.</p> I never worked with VSCode ! What do I need to know? <p>VSCode ist a really powerfull and customizable IDE. Nearly everything you need to work with Textfiles is there or can be added as a Plugin.</p> <p>These Plugins are the main point for many people to choose VSCode. (wait a moment, isn't that extendability also a reason people use Ansible?)</p> <p>The unchanged look and feel of VSCode after the first start</p> <p></p> <p>In the <code>Editor</code> Area there is a <code>Walktroughs</code> Section. It is highly advised to take a look at the Guides there even as a long time User you may be surprised by some features or shortcuts.</p> <p>In the <code>Activity Bar</code> there are alot of important things present that you will need on a regular basis. From top to bottom: <pre><code>  + File Explorer\n    * Expands to a file explorer where you can see the folder structure. \n      Maybe you need to select a folder first\n  + Search/Replace\n    * Search and replace in your working directory accross all files\n  + Git / Source Control\n    * Use versioncontrol to commit your change, switch branches \n      and push/pull to a remote destination\n  + Run / Debug\n    * not really needed for ansible\n  + Extensions\n    * All the Extension in a single place ready to search/download/install/uninstall \n  + User Account\n    * Your User Account \n  + VSCode Settings\n    * All Settings, preferences, themes, commands and a lot more to explore\n</code></pre></p> <p>This is small overview for the vanilla VSCode experience. We will add more functionality in the preparation phase.</p> <p>Add the Remote Explorer extension as your first Plugin.</p> <p> </p> Install VScode Remote SSH Extension I never worked with VSCode ! What changed? <p>Please wait a moment for it to finish. Afterwards there will be a new Icon in your <code>Activity Bar</code> it appears right under the <code>Extensions</code> Icon. The Status Bar also changed a bit in the left corner. There is a file opening in the Editor Pane with detailed Informations and Settings for the plugin you just installed. Sometimes it even shows a small demo.</p> <p>VScode has now a Remote Explorer icon in the <code>Activity Bar</code>, click on it, we will add a new SSH connection. Click on Open SSH config file, the  icon. Use the personal <code>.ssh\\config</code> file, the first entry in the list.</p> <p> </p> VScode Remote SSH configuration <p>Input the following configuration and save the file (use Ctrl+S or <code>File</code> and <code>Save</code>) afterwards.</p> <pre><code>Host Ansible-Dev-Node\nHostName hostname\nUser username\n</code></pre> <p>Note</p> <p>You trainer will provide you with the exact values for <code>HostName</code> and <code>User</code>!</p> <p>After saving, if the new SSH target does not show up, click the  Refresh button when hovering above the Remote tab.</p> <p>Do a right-click on the SSH target Ansible-Dev-Node and choose Connect in current window.... You will be asked two questions, what kind of platform the target node is (choose <code>Linux</code>), afterwards input your password. On the first connection you need to enter your password multiple times.</p> <p> </p> VScode Remote SSH connection 1 <p> </p> VScode Remote SSH connection 2 <p>Give it some time for installing the VScode plugin (in <code>~/.vscode-server</code>), a successful connection is established once a green SSH: Ansible-Dev-Node box is shown in the VScode footer. If you open a Terminal now, you will be on the remote host and have a remote shell and linux functionality.</p> <p> </p> VScode Remote SSH connected"},{"location":"preparation/#install-ansible-dependencies","title":"Install Ansible &amp; dependencies","text":"<p>You need to install Ansible (and a couple of Python dependencies) yourself. Copy (the code block has a copy button on the right) and paste (right-click in the terminal window) the command  in your terminal and hit Enter.</p> <pre><code>pip3 install --user ansible-core ansible-lint pywinrm pywinrm[kerberos]\n</code></pre> <p>What is installed here?</p> <ul> <li><code>ansible-core</code> - the Ansible binaries and a subset of available modules</li> <li><code>ansible-lint</code> - a Best-Practice checker for Ansible (not used or discussed in detail today, is a dependency for the Ansible VScode extension)</li> <li><code>pywinrm</code> and <code>pywinrm[kerberos]</code> - Python libraries for Windows Remote Management</li> </ul> <p>The Ansible binary (and other dependencies) were installed in your home directory and is (not yet) usable. We need to adjust the PATH. The following command adds a line to the end of your (personal) <code>.bashrc</code> file. Copy and paste the command  in your terminal and hit Enter.</p> <pre><code>echo -e \"\\nexport PATH=~/.local/bin:\\$PATH\" &gt;&gt; ~/.bashrc\n</code></pre> <p>Afterwards, source the file for the changes to take effect:</p> <pre><code>source ~/.bashrc\n</code></pre>"},{"location":"preparation/#useful-vscode-extension","title":"Useful VScode Extension","text":"<p>Tip</p> <p>This is an optional step, it may help with the first steps and is useful for further development with Ansible.</p> <p>Visual Studio Code has a huge Marketplace with loads of useful Plugins or feature extension, one of which is especially useful for Ansible Development and is directly from RedHat and itself is developed with all code open source.</p> <p> </p> VScode Marketplace Ansible Extension <p>Go to Extensions and search for redhat.ansible. Use the extension from Red Hat, this one is activly maintained. In the extension description, click the Install button.</p> What do I need this extension for and what changed? <p>This extension adds some cool features to VSCode that are purely ansible specific and need <code>ansible</code> and <code>ansible-lint</code> on your remote host to work.</p> <p>If VSCode identifies your file as an \"Ansible\" file it will change its behaviour. You can check this on the right side of your <code>Status Bar</code> at the bottom. <code>.yml</code> and <code>.yaml</code> files should be identified as YAML Language. Which is correct but we want to change that behaviour to be even \"more\" correct.</p> <p></p> <p>Click on <code>YAML</code> in the <code>Status Bar</code>. VSCode opens a dialog at the top. Select <code>Configure File Association for '.yml'</code>. Then select Ansible.</p> <p> </p> <p>The language in the <code>Status Bar</code> should now look like this:</p> <p></p> <p>For more information read the official instructions, please</p> <p>Ansible Extension Information </p>"},{"location":"preparation/#configure-azure-devops-and-git","title":"Configure Azure DevOps and Git","text":"<p>In Azure DevOps code is stored in repositories. These repositories on the other hand are kept in a project. Every project can have multiple repositories.</p> <p>Login to Azure DevOps and choose the Project in which you want to create your Repository. Every project, by default, already has one repository, we will create an additional one for our personal workshop content.</p> <p>In the top, open the drop-down menu and choose New repository.</p> <p> </p> Azure DevOps - Create new repository <p>On the right of your browser window, enter a name <code>Ansible-Workshop-username</code>for your repository, replace username with your username abbreviation. Leave all other configuration as-is.</p> <p> </p> Azure DevOps - New repository configuration <p>Once your repository (the place where your code (read: Ansible content) will be stored) is created, click the <code>Clone</code> button on the right. Now, click the button <code>Generate Git credentials</code>:</p> <p> </p> Azure DevOps - Generate Git credentials <p>Tip</p> <p>Store the password (access token) now, you won't be able to retrieve it again! Also, make note of your username, we need it a bit later on.</p> <p>All right, almost done! Now, let's clone the repository in your home directory on the Ansible Development node.</p> <p>Click on the <code>Clone</code> button again and copy (by clicking Copy clone URL to clipboard) the HTTPS URL. In the terminal of the dev node, paste the content with a right-click after typing <code>git clone</code>:</p> <pre><code>git clone https://******@dev.azure.com/******/******/_git/Ansible-Workshop-******\n</code></pre> <p>Change into the directory (with <code>cd</code>).</p> <p>To work and interact with Git, we will need to configure it slightly. Run the following commands:</p> <pre><code>git config --global user.name \"FirstName LastName\"\n</code></pre> <pre><code>git config --global user.email firstNameLastName@beiersdorf.com\n</code></pre> <p>Warning</p> <p>These are only examples, use your real Name and E-Mail address! This is used to identify, who made the code changes, which is fundamental for collaborative work on your Ansible playbooks.</p>"},{"location":"preparation/#login-to-aap","title":"Login to AAP","text":"<p>There are a number of constructs in the Automation Controller UI that enable multi-tenancy, notifications, scheduling, etc. However, we are only going to focus on a few of the key constructs that are required for this workshop today.</p> <ul> <li>Credentials</li> <li>Projects</li> <li>Inventory</li> <li>Job Template</li> </ul> <p>Your Automation Controller instance url and credentials were supplied to you by the trainer.</p> <p>Use the SAML login option, you may need to open the icognito browser, if you need to access with a different user for single-sign on.</p>"},{"location":"preparation/#create-scm-credential","title":"Create SCM Credential","text":"<p>Credentials are utilized by Controller for authentication when launching jobs against machines, synchronizing with inventory sources, and importing project content from a version control system.</p> <p>There are many types of credentials including machine, network, and various cloud providers. For this workshop, we are using machine and source control credentials.</p> <p>Select CREDENTIALS from the left hand panel under resources.</p> <p> </p> AAP - Add credentials <p>We need to access our source code repository, where our automation projects will live. Click the  icon and add a new credential.</p> <p>Complete the form using the following entries, replace username with your username abbreviation:</p> Key Value Name Azure DevOps username Description SCM credential for username Organization Choose your organization Credential Type Source Control Username Your name from Azure DevOps Username as shown in the Clone button in Azure DevOps Password Your password The password you retrieved when creating the Git credentials <p>Select SAVE </p> <p></p>"},{"location":"preparation/#create-machine-credential","title":"Create Machine Credential","text":"<p>We need to access our Windows Test machines over WinRM, let's create a machine credential for that.</p> <p>Click the  icon and add another new credential.</p> <p>Complete the form using the following entries, again, replace username with your username abbreviation:</p> Key Value Notes Name Windows Test Host username Organization Default Type Machine Username Login name Ask your trainer for assistance! Password password <p></p> <p>Select SAVE </p> <p>Perfect, all done for now, you are prepared for all further exercises!</p>"},{"location":"windows-automation/windows-adhoc/","title":"1 - Ad-hoc commands","text":"<p>For our first exercise, we are going to run some ad-hoc commands to help you get a feel for how Ansible works. Ansible ad-hoc commands enable you to perform tasks on remote nodes without having to write a playbook. They are very useful when you simply need to do one or two things quickly, to many remote nodes.</p> <p>Ad-hoc commands can be run on the command line and with the Ansible Automation Platform. We will try both ways and switch between running ad-hoc commands on the CLI and in the AAP.</p>"},{"location":"windows-automation/windows-adhoc/#preparation","title":"Preparation","text":"<p>Ensure that you are in your project folder and that you can run the Ansible CLI utility, run the following command:</p> <pre><code>git status\n</code></pre> <p>If you get the message <code>fatal: not a git repository</code> you are not in the correct folder. In the correct folder expect this line: <code>nothing to commit, working tree clean</code>.</p> <pre><code>ansible --version\n</code></pre> <p>The output looks something like this:</p> <pre><code>[student@ansible-1 workshop_project]$ ansible --version\nansible [core 2.14.0]\nconfig file = /etc/ansible/ansible.cfg\n  configured module search path = ['/home/student/.ansible/plugins/modules', '/usr/share/ansible/plugins/modules']\nansible python module location = /usr/lib/python3.9/site-packages/ansible\n  ansible collection location = /home/student/.ansible/collections:/usr/share/ansible/collections\n  executable location = /usr/bin/ansible\n  python version = 3.9.13 (main, Nov  9 2022, 13:16:24) [GCC 8.5.0 20210514 (Red Hat 8.5.0-15)] (/usr/bin/python3.9)\njinja version = 3.1.2\n  libyaml = True\n</code></pre> <p>The output gives some useful informations, the most important one are these:</p> <ul> <li><code>config file = /etc/ansible/ansible.cfg</code> - The currently used configuration file for Ansible</li> <li><code>python version = 3.9.13</code> - The Python interpreter used on the Controller (there may be multiple Python version installed...)</li> </ul> <p>Don't worry if your <code>ansible --version</code> command outputs <code>config file = None</code>, you will not need one currently.</p> Let's take a look at an example Ansible configuration. <p>This is an example configuration from a different Ansible controller.</p> <pre><code>[student@ansible-1 workshop_project]$ cat /etc/ansible/ansible.cfg [defaults]\nstdout_callback = yaml\nconnection = smart\ntimeout = 60\ndeprecation_warnings = False\naction_warnings = False\nsystem_warnings = False\ndevel_warning = False\nhost_key_checking = False\ncollections_on_ansible_version_mismatch = ignore\nretry_files_enabled = False\ninterpreter_python = auto_silent\ninventory = /home/student/lab_inventory/hosts\n[persistent_connection]\nconnect_timeout = 200\ncommand_timeout = 200\n</code></pre>"},{"location":"windows-automation/windows-adhoc/#step-1-test-connection","title":"Step 1 - Test connection","text":""},{"location":"windows-automation/windows-adhoc/#step-11-on-cli","title":"Step 1.1 - On CLI","text":"<p>Ansible needs to know which hosts are targeted for the automation, therefor all Ansible content development starts with defining a inventory and sorting your hosts into groups in it. For most use cases, a inventory in the <code>.ini</code> format is the easiest to work with. Let's create a simple inventory with a single group called <code>windows</code> and put your test host in it. Create a file <code>hosts.ini</code> (you could leave out the file extension, by default, Ansible asumes that the file is formated in the ini format).</p> <pre><code>touch hosts.ini\n</code></pre> <p>Add the following inventory definition and variables:</p> <pre><code>[windows]\nNODEName\n[windows:vars]\nansible_connection= winrm\nansible_winrm_transport= kerberos\nansible_port= 5986\nansible_host= \"{{ inventory_hostname }}.global.bdfgroup.net\"\nansible_user= \"Your User\"\n</code></pre> <p>Warning</p> <p>Set the correct <code>NODEName</code>, as well as the correct value for <code>ansible_user</code>. Ask your trainer for assistance!</p> <p>The inventory file is in <code>.ini</code> format, this is one of the possible formats the inventory can be provided. Ansible itself parses the inventory and uses a JSON representation, let's take a look on how Ansible sees our inventory:</p> <pre><code>ansible-inventory -i hosts.ini --list\n</code></pre> <p>The command above outputs info about all hosts in the inventory, the groups in which every host is in and which variables (mostly connection variables) are defined for every host. The <code>ansible-inventory</code> utility has more functionality, use the <code>--help</code> parameter.</p> Save some time and leave out some parameters? <p>You need to provide the path to your inventory file with the <code>-i</code> (<code>--inventory</code>) parameter everytime when executing the command.</p> <p><pre><code>ansible-inventory -i hosts.ini --list\n</code></pre> You can use the absolut or relative path.</p> <p>If you don't want to add <code>-i hosts.ini</code> everytime you run a command, you can specify it in an <code>ansible.cfg</code> file in your working directory.</p> <p><pre><code>touch ansible.cfg\n</code></pre> Copy the following content into this file to customize ansible to your liking or per project needs.</p> <pre><code># ansible.cfg file\n[defaults]\ninventory = hosts.ini\n</code></pre> <p>Ansible now knows which inventory file should be used for your project, now you can run the command like this:</p> <pre><code>ansible-inventory --list\n</code></pre> <p>All right, we have an inventory, let's test if we can reach our target node in the windows group. We will use the <code>ansible</code> utility to execute an ad-hoc command and will provide the <code>ansible.windows.win_ping</code> module. The <code>win_ping</code> module makes sure our windows hosts are responsive. This is not a traditional (ICMP) ping, but actually verifying both connectivity and authentication to the host.</p> <p>Execute the following command:</p> <pre><code>ansible -i hosts.ini windows -m ansible.windows.win_ping\n</code></pre> <p>The ad-hoc command expects a group to target (here it is the windows group) and a module with optional arguments.</p> <p>Failure</p> <p>Well, this didn't went well, we encountered an error.</p> <pre><code>The module ansible.windows.win_ping was not found in configured module paths\n</code></pre> <p>The module was not found, let's see which collections are installed (this is the place where modules are stored).</p> Additional infos to modules and collections <p>Ansible modules are units of code that can control system resources or execute system commands. Ansible provides a module library that you can execute directly on remote hosts or through playbooks. Modules (and much more) are stored in Collections, these are a distribution format for Ansible content. Take a look at the Ansible documentation if you need further information:</p> <ul> <li>Introduction to modules</li> <li>Using Ansible collections</li> <li>Collection Index</li> </ul> <p>Run the following command to list all installed collections:</p> <pre><code>ansible-galaxy collection list\n</code></pre> <p>Failure</p> <p>Another error, this one states that no collections (except the builtin collection ansible.builtin) are installed.</p> <pre><code>ERROR! - None of the provided paths were usable. Please specify a valid path with --collections-path\n</code></pre> <p>Let's install the missing collection:</p> <pre><code>ansible-galaxy collection install ansible.windows\n</code></pre> Got an SSL:CERTIFICATE_VERIFY_FAILED error? <p>If you see the following error:</p> <pre><code>$ ansible-galaxy collection install ansible.windows\nStarting galaxy collection install process\nProcess install dependency map\n[WARNING]: Skipping Galaxy server https://galaxy.ansible.com. Got an unexpected error when getting available versions of collection ansible.windows: Unknown error when attempting to call Galaxy at 'https://galaxy.ansible.com/api/': &lt;urlopen error [SSL:\nCERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate in certificate chain (_ssl.c:997)&gt;\nERROR! Unknown error when attempting to call Galaxy at 'https://galaxy.ansible.com/api/': &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self-signed certificate in certificate chain (_ssl.c:997)&gt;\n</code></pre> <p>Don't worry, you can add the <code>-c</code> (<code>--ignore-certs</code>) parameter, it instructs to ignore certificate validation errors.</p> <pre><code>ansible-galaxy collection install -c ansible.windows\n</code></pre> <p>Ok, looks good, try the ad-hoc command again.</p> <p>Failure</p> <p>Another error?</p> <pre><code>student1-win1 | FAILED! =&gt; {\n\"msg\": \"winrm or requests is not installed: No module named 'winrm'\"\n}\n</code></pre> <p>A missing dependency, Ansible modules are (mostly) written in Python (or in Powershell for Windows), they sometimes need additional Python modules or libraries. Let's install the missing depedency:</p> <pre><code>pip3 install pywinrm --user\n</code></pre> <p>We installed the <code>pywinrm</code> Python module with the Python package manager for the Python version Ansible is running with, this is needed for the initial connection from the Ansible Controller to the target host. Let's install another missing dependency:</p> <pre><code>pip3 install pywinrm[kerberos] --user\n</code></pre> <p>This module is needed because of the configured WinRM transport method. If we would have run the ad-hoc command, the error message would have stated the missing package.</p> <p>Ok, one more try, run the ad-hoc command again.</p> <pre><code>ansible -i hosts.ini windows -m ansible.windows.win_ping\n</code></pre> <p>Failure</p> <p>What? Another error?? Host unreachable??</p> <pre><code>kerberos: authGSSClientInit() failed: (('No credentials were supplied, or the credentials were unavailable or inaccessible', 458752), ...\n</code></pre> <p>Looks like we can't authenticate against the Windows target node.</p> <p>Authentication of Ansible (or in effect, us) against the Windows target node needs a Kerberos ticket. Do you remember the <code>ansible_user</code> variable in your inventory file? You referenced your personal (Admin) user there, we need to create a Kerberos ticket on the Ansible Dev Node for this one. Ansible uses this user to connect to the target node. </p> <p>Run the following command and input the password to authenticate your Admin-User:</p> <pre><code>kinit &lt;username&gt;\n</code></pre> <p>Tip</p> <p>Naturally, replace <code>&lt;username&gt;</code>. Kerberos is picky when it comes to spelling and capitalization, you must use the exact spelling when issueing your Kerberos ticket as in the value of the <code>ansible_user</code> variable.</p> <p>You can check if the ticket was granted and which principal is used with <code>klist</code>.</p> <p>Ok, one last try with the ad-hoc command!</p> <pre><code>[student@ansible-1 workshop_project]$ ansible -i hosts.ini windows -m ansible.windows.win_ping\nstudent1-win1 | SUCCESS =&gt; {\n\"changed\": false,\n    \"ping\": \"pong\"\n}\n</code></pre> <p>Success</p> <p>Finally, everything in place! We can connect and authenticate with our Windows target node.</p> <p>One of the hardest parts in Ansible is, getting the initial communication working. With Windows this is especially true, when things like Kerberos come into play. But, you made it! From now on it should get easier.</p>"},{"location":"windows-automation/windows-adhoc/#step-12-in-aap","title":"Step 1.2 - In AAP","text":"<p>After running the ad-hoc command on the command line, let's do it in the Automation Platform.</p> <p>As before, we will need an Inventory.</p> <p>Click Inventories on the left panel, and then click the name of our Inventory Workshop Inventory. Now that you are on the Inventory Details page, we will need to go select our Host. So click HOSTS.</p> <p>Next to each host is a checkbox. Check the box next to each host you want to run an ad-hoc Command on. Select the Run Command button.</p> <p></p> <p>This will pop up the Execute Command window. From here is where we can run a single task against our hosts.</p> <p>Let\u2019s start with something really basic - pinging a host.</p> <p>Fill out this form as follows</p> Key Value Note Module <code>win_ping</code> Arguments Intentionally blank Limit This should display the host you selected in the previous step <p>Click the Next button</p> Key Value Note Execution environment BSS EE - Windows <p>Click the Next button</p> Key Value Note Machine credential Windows Test Host username Your personal Machine credential you created before <p>Once you click LAUNCH you will be redirected to the Job log. Every job and action in Automation Controller is recorded and stored. These logs can also be exported automatically to another logging system such as Splunk or ELK.</p> <p>The output tab is shown by default. Any output generated by the task is displayed here.</p> <p></p> <p>The details tab shows information on when the task was executed, by whom, with what credential and what hosts were affected.</p> <p></p> <p>The results returned will be different depending on which module is used, as they all handle and deal with different data sets depending on the task. No matter which module is used, you will always see a color coded STATUS of either SUCCESS, FAILURE, CHANGED, or SKIPPING.</p>"},{"location":"windows-automation/windows-adhoc/#step-2-get-infos-about-target","title":"Step 2 - Get infos about target","text":"<p>Ad-hoc commands are perfect to gather informations about your target system.</p>"},{"location":"windows-automation/windows-adhoc/#step-21-on-cli","title":"Step 2.1 - On CLI","text":"<p>We will now take a look at your Windows node configuration. The <code>setup</code> module queries the remote host for various data and returns that data as Ansible facts. This data is useful to determine things such as operating system version, hardware configuration, among other data points. This can then be used in your playbook for all sorts of reasons such as determining whether a task should even run, or determining what the name of a package should be based upon the operating system version.</p> <p>The <code>setup</code> module will run automatically at the beginning of every playbook, unless configured not to, so that this data is always available to your playbook.</p> <p>Run the following command:</p> <pre><code>ansible -i hosts.ini windows -m ansible.windows.setup\n</code></pre> <p>You are seeing loads of useful informations and you can use every bit as variables in your playbooks later on!</p>"},{"location":"windows-automation/windows-adhoc/#step-22-in-aap","title":"Step 2.2 - In AAP","text":"<p>After running the ad-hoc command to gather infos on the command line, let's do it again in the Automation Platform.</p> <p>You need to go back to Inventories Workshop Inventory Hosts  Activate Checkbox of Windows host  Click Run command. Lets go ahead and run the <code>setup</code> module to look at the output. Fill out the EXECUTE COMMAND form again with this info.</p> Key Value Note Module <code>setup</code> Arguments Intentionally blank Limit This should display the host you selected in the previous step <p>Click the Next button</p> Key Value Note Execution environment BSS EE - Windows <p>Click the Next button</p> Key Value Note Machine credential Windows Test Host username Your personal Machine credential you created before <p>You should see output like this:</p> <p></p> <p>(Note: If you click the three dots shown on line 21 in the above output, you will see all the facts returned by the <code>setup</code> module.)</p>"},{"location":"windows-automation/windows-adhoc/#step-3-run-ps-command","title":"Step 3 - Run PS command","text":"<p>Now let\u2019s see how we can run a PowerShell command and view the output using the <code>ansible.windows.win_shell</code> module.</p>"},{"location":"windows-automation/windows-adhoc/#step-31-on-cli","title":"Step 3.1 - On CLI","text":"<p>You are getting more and more familiar with ad-hoc commands, now you need to provide additional arguments to the used Ansible module.  </p> <p>Run the following command to run the <code>Get-Service</code> Powershell command:</p> <pre><code>ansible -i hosts.ini windows -m ansible.windows.win_shell -a \"Get-Service\"\n</code></pre> <p>The output looks something like this:</p> <pre><code>student@ansible-1 workshop_project]$ ansible -i hosts.ini windows -m ansible.windows.win_shell -a \"Get-Service\"\nstudent1-win1 | CHANGED | rc=0 &gt;&gt;\n\nStatus   Name               DisplayName                           ------   ----               -----------                           Running  AmazonSSMAgent     Amazon SSM Agent                      Stopped  AppIDSvc           Application Identity                  Stopped  AppMgmt            Application Management                Stopped  AppReadiness       App Readiness                         Stopped  AppXSvc            AppX Deployment Service (AppXSVC)     Stopped  AWSLiteAgent       AWS Lite Guest Agent                  Running  BFE                Base Filtering Engine                 Stopped  BITS               Background Intelligent Transfer Ser...\nRunning  CertPropSvc        Certificate Propagation               Stopped  cfn-hup            CloudFormation cfn-hup                Stopped  ClipSVC            Client License Service (ClipSVC)\n...\n</code></pre> <p>The output is not green anymore as before, but yellow, the output also states that something was CHANGED. We do know that nothing changed, but for Ansible any command could be provided through Powershell, it can't predict what will happen or if the desired state is already reached. This is called idempotency and the <code>win_shell</code> (and <code>win_command</code>) module do not support this. All other Windows modules work idempotent, try to use these instead of <code>win_shell</code> or <code>win_command</code>.</p>"},{"location":"windows-automation/windows-adhoc/#step-32-in-aap","title":"Step 3.2 - In AAP","text":"<p>You know the drill, go to the spot to run ad-hoc commands against the Windows target node.</p> <p>Let\u2019s fill out the form again, but this time use the <code>win_shell</code> module to execute the <code>Get-Service</code> Powershell command.</p> Key Value Note Module <code>win_shell</code> Arguments <code>Get-Service</code> Limit This should display the host you selected in the previous step <p>Click the Next button</p> Key Value Note Execution environment BSS EE - Windows <p>Click the Next button</p> Key Value Note Machine credential Windows Test Host username Your personal Machine credential you created before <p>Launch the job and view the results. You will see that it returns a direct output of what the Powershell command returned. This data can be stored to a variable and directly parsed inside your Ansible playbook later on.</p> <p>And run it one more time with the <code>Get-Process</code> Powershell command.</p> Key Value Note Module <code>win_shell</code> Arguments <code>Get-Process</code> Limit This should display the host you selected in the previous step <p>Click the Next button</p> Key Value Note Execution environment BSS EE - Windows <p>Click the Next button</p> Key Value Note Machine credential Windows Test Host username Your personal Machine credential you created before <p>The difference between <code>ansible.windows.win_shell</code> and <code>ansible.windows.win_command</code> is that <code>win_command</code> arguments will not be processed through the shell, so variables like <code>$env:HOME</code> and operations like <code>&lt;</code>, <code>&gt;</code>, <code>|</code>, and <code>;</code> will not work (use the <code>ansible.windows.win_shell</code> module if you need these features). The <code>ansible.windows.win_command</code> module is much more secure as it\u2019s not affected by the user\u2019s environment.</p>"},{"location":"windows-automation/windows-adhoc/#end-result","title":"End Result","text":"<p>Ad-hoc commands may be useful to run once in a while. However, as automation continues to grow within an environment, they are used less often.</p> <p>As you saw, doing stuff on the command-line requires a lot more configuration and dependency handling. The AAP abstracts most of the stuff from you (e.g. by bundling all necessary dependencies in a container image). Still, development of Ansible content is done with Ansible on the Command-Line, you will get used to it, the more you try!</p> <p>Hint</p> <p>When a task is performed on a Windows server, Ansible is smart enough to know whether a reboot is required after executing that task. The below is part of the output of the command to remove the IIS feature. The output of this task can be used in subsequent tasks, like whether or not to reboot before continuing.</p> <p></p> <p>All modules used in the previous exercises are described in detail in the Ansible documentation.</p> <ul> <li>win_ping</li> <li>setup</li> <li>win_shell</li> </ul>"},{"location":"windows-automation/windows-advanced-playbooks/","title":"4 - Advanced playbook concepts","text":"<p>Previous exercises showed you the basics of Ansible playbooks. In the next few exercises, we are going to teach some more advanced ansible skills that will add flexibility and power to your automation.</p> <p>Ansible exists to make tasks simple and repeatable. We also know that not all systems are exactly alike and often require some slight change to the way an Ansible playbook is run. Enter variables.</p> <p>Variables are how we deal with differences between your systems, allowing you to account for a change in port, IP address or directory, etc..</p> <p>Loops enable us to repeat the same task over and over again. For example, lets say you want to start multiple services, install several features, or create multiple directories. By using an ansible loop, you can do that in a single task.</p> <p>Handlers are the way in which we restart services. Did you just deploy a new config file, install a new package? If so, you may need to restart a service for those changes to take effect. We do that with a handler.</p> <p>For a full understanding of variables, loops, and handlers; check out the Ansible documentation on these subjects.</p> <ul> <li>Ansible Variables</li> <li>Ansible Loops</li> <li>Ansible Handlers</li> </ul> <p>To begin, we are going to create a new playbook, but it should look very familiar to the one you already created before.</p>"},{"location":"windows-automation/windows-advanced-playbooks/#step-1-create-directory-structure","title":"Step 1 - Create directory structure","text":"<p>Within Visual Studio Code, create a new directory in your git repo and create a <code>site.yml</code> file.</p> <p>In the Explorer accordion you should have a WORKSHOP_PROJECT section where you previously made <code>iis_basic</code>.</p> <p></p> <p>Create a folder called iis_advanced and a file called <code>site.yml</code></p> <p>Hover over the WORKSHOP_PROJECT section and click the New Folder button</p> <p>Type <code>iis_advanced</code> and hit enter. Now, click that folder so it is selected.</p> <p>Right-click the <code>iis_advanced</code> folder and select New File.</p> <p>Type <code>site.yml</code> and hit enter.</p> <p>You should now have an editor open in the right pane that can be used for creating your playbook.</p> <p></p>"},{"location":"windows-automation/windows-advanced-playbooks/#step-2-play-definition","title":"Step 2 - Play definition","text":"<p>Add a play definition and some variables to your playbook. These include addtional packages your playbook will install on your web servers, plus some web server specific configurations.</p> <pre><code>---\n- name: This is a play within a playbook\nhosts: windows\nvars:\niis_sites:\n- name: 'Ansible Playbook Test'\nport: '8080'\npath: 'C:\\sites\\playbooktest'\n- name: 'Ansible Playbook Test 2'\nport: '8081'\npath: 'C:\\sites\\playbooktest2'\niis_test_message: \"Hello World!  My test IIS Server\"\n</code></pre>"},{"location":"windows-automation/windows-advanced-playbooks/#step-3-add-tasks","title":"Step 3 - Add tasks","text":"<p>Add a new task called install IIS. After writing the playbook, click <code>File</code> <code>Save</code> to save your changes.</p> <pre><code>  tasks:\n- name: Install IIS\nansible.windows.win_feature:\nname: Web-Server\nstate: present\n- name: Create site directory structure\nansible.windows.win_file:\npath: \"{{ item.path }}\"\nstate: directory\nloop: \"{{ iis_sites }}\"\n- name: Create IIS site\ncommunity.windows.win_iis_website:\nname: \"{{ item.name }}\"\nstate: started\nport: \"{{ item.port }}\"\nphysical_path: \"{{ item.path }}\"\nloop: \"{{ iis_sites }}\"\nnotify: restart iis service\n</code></pre> Did you spot that we used two different Ansible collections? <p>This is not an error, the Windows modules are stored in two collections, <code>ansible.windows</code> and <code>community.windows</code>. Which may seem odd, but this makes sense (if know about the background). The modules in the <code>ansible.windows</code> collection are certified by Red Hat, if any bugs happen in those modules, Red Hat will fix them as part of the AAP subscription. The modules in the <code>community.windows</code> collection are community-maintained, bug fixes must come from Open Source contributors (which are as fast or even faster than Red Hat itself). As development is much fast in the Open Source community, this collections has even more modules than the other Windows collection!</p> <p></p> <p>What is happening here!?</p> <ul> <li><code>vars:</code> You\u2019ve told Ansible the next thing it sees will be a variable name</li> <li><code>iis_sites</code> You are defining a list-type variable called iis_sites. What follows is a list of each site with it\u2019s related variables</li> <li><code>win_file:</code> This module is used to create, modify, delete files,   directories, and symlinks.</li> <li><code>{{ item }}</code> You are telling Ansible that this will expand into a list item. Each item has several variables like <code>name</code>, <code>port</code> and <code>path</code>.</li> <li><code>loop: \"{{ iis_sites }}</code> This is your loop which is   instructing Ansible to perform this task on every <code>item</code> in   <code>iis_sites</code></li> <li><code>notify: restart iis service</code> This statement is a <code>handler</code>, so   we\u2019ll come back to it in Section 3.</li> </ul> <p>Add a task to open the firewall and deploy some files. After that, you will define a task to start the IIS service.</p> <p>Create a <code>templates</code> directory in your project directory and create a template as follows:</p> <p>Ensure your iis_advanced folder is highlighted and then hover over the WORKSHOP_PROJECT section and click the New Folder button</p> <p>Type <code>templates</code> and hit enter. The right-click the templates folder and click the New File button.</p> <p>Type <code>index.html.j2</code> and hit enter.</p> <p>You should now have an editor open in the right pane that can be used for creating your template. Enter the following details:</p> <pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;p align=center&gt;&lt;img src='http://docs.ansible.com/images/logo.png' align=center&gt;\n&lt;h1 align=center&gt;{{ ansible_host }} --- {{ iis_test_message }}&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p>Edit back your playbook, <code>site.yml</code>, by opening your firewall ports and writing the template. Use single quotes for <code>win_template</code> in order to not escape the forward slash.</p> <pre><code>    - name: Open port for site on the firewall\ncommunity.windows.win_firewall_rule:\nname: \"iisport{{ item.port }}\"\nenable: yes\nstate: present\nlocalport: \"{{ item.port }}\"\naction: Allow\ndirection: In\nprotocol: Tcp\nloop: \"{{ iis_sites }}\"\n- name: Template simple web site to iis_site_path as index.html\nansible.windows.win_template:\nsrc: 'index.html.j2'\ndest: '{{ item.path }}\\index.html'\nloop: \"{{ iis_sites }}\"\n- name: Show website addresses\nansible.builtin.debug:\nmsg: \"{{ item }}\"\nloop:\n- http://{{ ansible_host }}:8080\n- http://{{ ansible_host }}:8081\n</code></pre> <p>So\u2026 what did I just write?</p> <ul> <li><code>win_firewall_rule:</code> This module is used to create, modify, and update firewall rules. </li> <li><code>win_template:</code> This module specifies that a jinja2 template is being used and deployed.</li> <li><code>loop:</code> used in Ansible to run a task multiple times. Expects a list, which can be provided directly (as in the last task) or in a variable.</li> <li><code>debug:</code> Again, like in the <code>iis_basic</code> playbook, this task displays the URLs to access the sites we are creating for this exercise.</li> </ul>"},{"location":"windows-automation/windows-advanced-playbooks/#step-4-define-and-use-handlers","title":"Step 4 - Define and Use Handlers","text":"<p>There are any number of reasons we often need to restart a service/process including the deployment of a configuration file, installing a new package, etc. There are really two parts to this Section; adding a handler to the playbook and calling the handler after a task. We will start with the former.</p> <p>The <code>handlers</code> block should start after a one-level indentation, that is, two spaces. It should align with the <code>tasks</code> block.</p> <pre><code>  handlers:\n- name: restart iis service\nansible.windows.win_service:\nname: W3Svc\nstate: restarted\nstart_mode: auto\n</code></pre> <p>You can\u2019t have a former if you don\u2019t mention the latter</p> <ul> <li><code>handler:</code> This is telling the play that the <code>tasks:</code> are   over, and now we are defining <code>handlers:</code>. Everything below that   looks the same as any other task, i.e. you give it a name, a   module, and the options for that module. This is the definition of   a handler.</li> <li><code>notify: restart iis service</code> \u2026and here is your latter. Finally!   The <code>notify</code> statement is the invocation of a handler by name.   Quite the reveal, we know. You already noticed that you\u2019ve added a   <code>notify</code> statement to the <code>win_iis_website</code> task, now you know   why.</li> <li>the order of <code>tasks</code> and <code>handlers</code> is not important, you could define Handlers above the tasks. Ansible knows what to do with both of them.</li> </ul>"},{"location":"windows-automation/windows-advanced-playbooks/#step-5-commit-and-review","title":"Step 5 - Commit and Review","text":"<p>Your new, improved playbook is done! But remember we still need to commit the changes to source code control.</p> <p>Click <code>File</code> \u2192 <code>Save All</code> to save the files you\u2019ve written</p> <p></p> <p>Click the Source Code icon (1), type in a commit message such as Adding advanced playbook (2), and click the check box above (3).</p> <p></p> <p>Sync to gitlab by clicking the arrows on the lower left blue bar. When prompted, click <code>OK</code> to push and pull commits.</p> <p></p> <p>It should take 5-30 seconds to finish the commit. The blue bar should stop rotating and indicate 0 problems\u2026</p> <p>Now let\u2019s take a second look to make sure everything looks the way you intended. If not, now is the time for us to fix it up. The playbook below should execute successfully.</p> <pre><code>---\n- name: This is a play within a playbook\nhosts: windows\nvars:\niis_sites:\n- name: 'Ansible Playbook Test'\nport: '8080'\npath: 'C:\\sites\\playbooktest'\n- name: 'Ansible Playbook Test 2'\nport: '8081'\npath: 'C:\\sites\\playbooktest2'\niis_test_message: \"Hello World!  My test IIS Server\"\ntasks:\n- name: Install IIS\nansible.windows.win_feature:\nname: Web-Server\nstate: present\n- name: Create site directory structure\nansible.windows.win_file:\npath: \"{{ item.path }}\"\nstate: directory\nloop: \"{{ iis_sites }}\"\n- name: Create IIS site\ncommunity.windows.win_iis_website:\nname: \"{{ item.name }}\"\nstate: started\nport: \"{{ item.port }}\"\nphysical_path: \"{{ item.path }}\"\nloop: \"{{ iis_sites }}\"\nnotify: restart iis service\n- name: Open port for site on the firewall\ncommunity.windows.win_firewall_rule:\nname: \"iisport{{ item.port }}\"\nenable: yes\nstate: present\nlocalport: \"{{ item.port }}\"\naction: Allow\ndirection: In\nprotocol: Tcp\nloop: \"{{ iis_sites }}\"\n- name: Template simple web site to iis_site_path as index.html\nansible.windows.win_template:\nsrc: 'index.html.j2'\ndest: '{{ item.path }}\\index.html'\nloop: \"{{ iis_sites }}\"\n- name: Show website addresses\nansible.builtin.debug:\nmsg: \"{{ item }}\"\nloop:\n- http://{{ ansible_host }}:8080\n- http://{{ ansible_host }}:8081\nhandlers:\n- name: restart iis service\nansible.windows.win_service:\nname: W3Svc\nstate: restarted\nstart_mode: auto\n</code></pre>"},{"location":"windows-automation/windows-advanced-playbooks/#step-6-create-job-template","title":"Step 6 - Create Job template","text":"<p>Before we can create our Job Template, you must first go resync your Project again. So do that now.</p> <p>Tip</p> <p>You must do this anytime you create a new base playbook file that you will be selecting via a Job Template. The new file must be synced to Controller before it will become available in the Job Template playbook dropdown.</p> <p>To test this playbook, we need to create a new Job Template to run this playbook. So go to Template and click Add and select <code>Job Template</code> to create a second job template.</p> <p>Complete the form using the following values, replace username as before.:</p> <p>Danger</p> <p>Your playbook targets the <code>windows</code> group. We have all test hosts in the inventory <code>Workshop Example CC</code>, you must place a limit on your job template! If you target the complete windows group, you will automate all hosts, even those of your colleagues!</p> Key Value Note Name IIS Advanced username Description Template for iis_advanced Job Type Run Inventory Workshop Example CC Project Ansible Workshop Project username Execution Environment BSS EE - Windows Playbook <code>iis_advanced/site.yml</code> Credentials Azure DevOps username Limit Your single host as in your local inventory! Do not target the windows group! Options  Enable Fact Storage <p>Danger</p> <p>Did you set the <code>limit</code>?</p> <p>Click SAVE  and on the following page, select the Survey tab.</p> <p>Create a new survey with following values:</p> Key Value Note Question Please enter a test message for your new website Description Website test message prompt Answer Variable Name <code>iis_test_message</code> Answer Type Text Minimum/Maximum Length Keep the defaults Default Answer Be creative, keep it clean, we\u2019re all professionals here <p></p> <p>Select SAVE  and remember to flip the On switch </p>"},{"location":"windows-automation/windows-advanced-playbooks/#step-7-run-new-playbook","title":"Step 7 - Run new playbook","text":"<p>Now let\u2019s run it and see how it works.</p> <p>Select TEMPLATES.</p> <p>Note</p> <p>Alternatively, if you haven\u2019t navigated away from the job templates creation page, you can scroll down to see all existing job templates.</p> <p>Click the rocketship icon  for the IIS Advanced Job Template.</p> <p>When prompted, enter your desired test message.</p> <p>After it launches, you should be redirected and can watch the output of the job in real time.</p> <p>When the job has successfully completed, you should see two URLs to your websites printed at the bottom of the job output.</p> <p></p>"},{"location":"windows-automation/windows-patch/","title":"5 - Optional: Automated Patching","text":"<p>The <code>win_updates</code> module is used to either check for or to install Windows Updates. The module utilizes the built in Windows Update service to function. This means that you still will need a backend system like WSUS or the online Windows Update Servers to download updates from. If your server\u2019s Windows Update configuration is set to automatically download but not install, you can also utilize the module to stage updates by telling it to <code>search</code> for updates. We also have the ability to whitelist or blacklist updates. For example we could tell it to only install one particular security update instead of every update available.</p> <p>To begin, we are going to create a new playbook. We will be repeating the steps you performed in the earlier exercises.</p>"},{"location":"windows-automation/windows-patch/#step-1-create-folder-structure","title":"Step 1 - Create folder structure","text":"<p>Within Visual Studio Code, we will now create a new directory in your git repository and create a new playbook file.</p> <p>In the Explorer accordion you should have a student# section where you previously made iis_basic.</p> <p></p> <p>Hover over the WORKSHOP_PROJECT section and click the New Folder button. Type <code>win_updates</code> and hit enter.</p> <p>Now right-click the <code>win_updates</code> folder and click the New File button. Type <code>site.yml</code> and hit enter.</p> <p>You should now have an editor open in the right pane that can be used for creating your playbook.</p> <p></p>"},{"location":"windows-automation/windows-patch/#step-2-write-playbook","title":"Step 2 - Write Playbook","text":"<p>Edit your site.yml and add a play definition and some tasks to your playbook. This will cover a very basic playbook for installing Windows Updates. Typically you would have even more tasks to accomplish the entire update process. This might entail creating service tickets, creating snapshots, or disabling monitoring.</p> <pre><code>---\n- hosts: windows\nname: This is my Windows patching playbook\ntasks:\n- name: Install Windows Updates\nansible.windows.win_updates:\ncategory_names: \"{{ categories | default(omit) }}\"\nreboot: '{{ reboot_server | default(true) }}'\n</code></pre> <p>What are we doing?</p> <p>The module <code>win_updates</code> is used for checking or installing updates. We tell it to only install updates from specific categories using a variable. <code>reboot</code> attribute will automatically reboot the remote host if it is required and continue to install updates after the reboot. We will also use a survey variable to stop us from rebooting even if needed. If the reboot_server value is not specified we will set the reboot attribute to true.</p>"},{"location":"windows-automation/windows-patch/#step-3-save-and-commit","title":"Step 3 - Save and Commit","text":"<p>Your playbook is done! But remember we still need to commit the changes to source code control.</p> CLIVS Code <p>Add the files to the local staging area.</p> <pre><code>git add -A\n</code></pre> <p>Commit the changes by providing a commit message.</p> <pre><code>git commit -m \"Adding windows update playbook\"\n</code></pre> <p>Sync to the remote Git.</p> <pre><code>git push\n</code></pre> <p>Click <code>File</code> <code>Save All</code> to save the files you\u2019ve written</p> <p></p> <p>Click the Source Code icon (1), type in a commit message such as Adding windows update playbook (2), and click the check box above (3).</p> <p></p> <p>Sync to the remote Git by clicking the arrows on the lower left blue bar.</p> <p></p> <p>It should take 5-30 seconds to finish the commit. The blue bar should stop rotating and indicate 0 problems\u2026</p>"},{"location":"windows-automation/windows-patch/#step-4-create-job-template","title":"Step 4 - Create Job Template","text":"<p>Now, back in Controller, you will need to resync your Project so that the new files show up.</p> <p>Next we need to create a new Job Template to run this playbook. So go to Template, click Add and select <code>Job Template</code> to create a new job template.</p> <p>Complete the form using the following values:</p> <p>Danger</p> <p>Your playbook targets the <code>windows</code> group. We have all test hosts in the inventory <code>Workshop Example CC</code>, you must place a limit on your job template! If you target the complete windows group, you will automate all hosts, even those of your colleagues!</p> Key Value Notes Name Windows Updates username Description Template for Windows updates Job Type Run Inventory Workshop Inventory Project Ansible Workshop Project username Execution Environment BSS EE - Windows Playbook <code>win_updates/site.yml</code> Credentials Azure DevOps username Limit Your single host as in your local inventory! Do not target the windows group! Options  Enable Fact Storage <p>Danger</p> <p>Did you set the <code>limit</code>?</p> <p>Click SAVE  and then select ADD SURVEY </p> <p>Complete the survey form with following values:</p> Key Value Note PROMPT Categories DESCRIPTION Which Categories to install? ANSWER VARIABLE NAME categories ANSWER TYPE Multiple Choice (multiple select) There's also a single selection option MULTIPLE CHOICE OPTIONS ApplicationConnectorsCriticalUpdatesDefinitionUpdatesDeveloperKitsFeaturePacks GuidanceSecurityUpdatesServicePacksToolsUpdateRollupsUpdates DEFAULT ANSWER CriticalUpdatesSecurityUpdates REQUIRED Selected <p></p> <p>Once complete, click the ADD  button. You will see your new field off to the right. Now add another field by filling out the form on the left again.</p> Key Value Note PROMPT Reboot after install? DESCRIPTION If the server needs to reboot, then do so after install ANSWER VARIABLE NAME <code>reboot_server</code> ANSWER TYPE Multiple Choice (single select) MULTIPLE CHOICE OPTIONS YesNo DEFAULT ANSWER Yes REQUIRED Selected <p></p> <p>Select ADD , then select SAVE .</p> <p>Back on the main Job Template page, select SAVE  again.</p>"},{"location":"windows-automation/windows-patch/#step-5-running-the-playbook","title":"Step 5 - Running the playbook","text":"<p>Now let\u2019s run it and see how it works.</p> <p>Select TEMPLATES.</p> <p>Hint</p> <p>Alternatively, if you haven\u2019t navigated away from the job templates creation page, you can scroll down to see all existing job templates.</p> <p>Click the rocketship icon  for the Windows Updates Job Template. When prompted, enter select the update categories. Answer <code>Yes</code> to the Reboot after install? prompt and click NEXT.</p> <p>After the job launches, you should be redirected and can watch the output of the job in realtime.</p>"},{"location":"windows-automation/windows-playbook/","title":"2 - Writing playbooks","text":"<p>Let\u2019s get started writing our first Ansible playbook!  </p> <p>The playbook is where you list the steps you would like to automate into a repeatable set of plays and tasks. To begin, we will setup our directory structure for storing our playbooks. This directory structure will sync with a source control management (SCM) system to version our playbooks. We will be using git as our SCM.</p> <p>A playbook can have multiple plays and a play can have one or more tasks. The goal of a play is to map a group of hosts. The goal of a task is to implement modules against those hosts.</p> <p>For our first playbook, we are only going to write one play with three tasks.</p> <p>All of our playbooks will be stored in a single git repository. Multiple users can use the same repository and git will manage file conflicts and versions. In this environment, each student has sole access to a private repository.</p>"},{"location":"windows-automation/windows-playbook/#overview","title":"Overview","text":"<p>Starting at this task we are going to use Visual Studio Code as our editor. In addition, we will use Azure DevOps for source code control. This will allow us to minimize development work on the linux command line. Other editors or source code solutions can be used, but this will show the general workflow.</p>"},{"location":"windows-automation/windows-playbook/#step-1-create-directory-structure","title":"Step 1: Create directory structure","text":"<p>There is a best practice on the preferred directory structures for playbooks. We strongly encourage you to read and understand these practices as you develop your Ansible skills. That said, our playbook today is very basic and a complex directory structure is not necessary.</p> <p>Instead, we are going to create a very simple directory structure for our playbook, and add just a couple of files.</p> <p>Open Visual Studio Code on the remote host and select your git repository as folder.</p> <p></p> <p>Step 2: Create a directory called <code>iis_basic</code> and a file called <code>install_iis.yml</code></p> <pre><code>[adm1schmidtjon@HAMS010784]$ mkdir iis_basic\n</code></pre> <p>You can also do this with VS Code. Hover over the WORKSHOP_PROJECT section and click the New Folder button. Create a folder called <code>iis_basic</code>. Then click that folder so it is selected. Right click the new folder you\u2019ve created and create a file called <code>install_iis.yml</code>.</p> <p>You should now have an editor open in the right pane that can be used for creating your playbook.</p> <p></p>"},{"location":"windows-automation/windows-playbook/#step-2-defining-your-play","title":"Step 2: Defining your Play","text":"<p>Now that you are editing <code>install_iis.yml</code>, let\u2019s begin by defining the play and then understanding what each line accomplishes</p> <pre><code>---\n- name: Install the iis web service\nhosts: windows\n</code></pre> <ul> <li><code>---</code> Defines the beginning of YAML</li> <li><code>name: Install the iis web service</code> This describes our play</li> <li><code>hosts: windows</code> Defines the host group in your inventory on which this play will run against</li> </ul>"},{"location":"windows-automation/windows-playbook/#step-3-adding-tasks-to-your-play","title":"Step 3: Adding tasks to your Play","text":"<p>Now that we\u2019ve defined your play, let\u2019s add some tasks to get some things done. Align (vertically) the t in <code>task</code> with the h in <code>hosts</code>. Yes, it does actually matter. In fact, you should make sure all of your playbook statements are aligned in the way shown here. You also must use spaces for indentation. Tabs are not valid YAML syntax. If you want to see the entire playbook for reference, skip to the bottom of this exercise.</p> <pre><code>  tasks:\n- name: Install iis\nansible.windows.win_feature:\nname: Web-Server\nstate: present\n- name: Start iis service\nansible.windows.win_service:\nname: W3Svc\nstate: started\n- name: Create website index.html\nansible.windows.win_copy:\ncontent: \"{{ iis_test_message }}\"\ndest: C:\\Inetpub\\wwwroot\\index.html\n- name: Show website address\nansible.builtin.debug:\nmsg: \"Open an RDP session and open http://{{ ansible_host }} in a browser.\"\n</code></pre> <ul> <li><code>tasks:</code> This denotes that one or more tasks are about to be defined</li> <li><code>- name:</code> Each task requires a name which will print to standard output when you run your playbook. Therefore, give your tasks a name that is short, sweet, and to the point.</li> </ul> Additional info regarding the <code>name</code> parameter <p>The <code>name</code> key is optional, still, it is highly advisable to use it, as this is the output you will be getting when executing the playbook. When ommiting the <code>name</code> parameter, your playbook only will output that it does something with the <code>ansible.windows.win_feature</code> module, but not what it does exactly.</p> <pre><code>    ansible.windows.win_feature:\nname: Web-Server\nstate: present\n</code></pre> <p>These three lines are calling the Ansible module <code>win_feature</code> to install the IIS Web Server. Click here to see all options for the <code>win_feature</code> module.</p> <pre><code>    ansible.windows.win_service:\nname: W3Svc\nstate: started\n</code></pre> <p>The next few lines are using the ansible module win_service to start the IIS service. The <code>win_service</code> module is the preferred way of controlling services on remote hosts. Click here to learn more about the <code>win_service</code> module.</p> <pre><code>    ansible.windows.win_copy:\ncontent: \"{{ iis_test_message }}\"\ndest: C:\\Inetpub\\wwwroot\\index.html\n</code></pre> <p>In this task, we use the <code>win_copy</code> module to create a file with specific contents in it. We are getting a little more complex here as we are using a variable to source the contents. We won\u2019t go into the variables just yet, since they will be showcased in a later lesson.</p> <pre><code>    ansible.builtin.debug:\nmsg: \"Open an RDP session and open http://{{ ansible_host }} in a browser.\"\n</code></pre> <p>This task uses the <code>debug</code> module to post a message at the end of playbook execution.</p> <p>Try to run your playbook! Execute the following command:</p> <pre><code>ansible-playbook -i hosts.ini iis_basic/install_iis.yml\n</code></pre> <p>Warning</p> <p>At the moment your playbook will not run properly. There is an undefined Variable. We will solve this problem in AAP!</p>"},{"location":"windows-automation/windows-playbook/#step-4-saving-your-playbook","title":"Step 4: Saving your Playbook","text":"<p>Now that you\u2019ve completed writing your playbook, it would be a shame not to keep it. Click <code>File</code> <code>Save</code> from the menu.</p> <p>And that should do it. You should now have a fully written playbook called <code>install_iis.yml</code>.</p> <p>But wait!!! We haven\u2019t committed our changes from our local copy to the remote git server.</p> CLIVS Code <p>Add the file (to the local staging area).</p> <pre><code>[adm1schmidtjon@HAMS010784]$ git add iis_basic/install_iis.yml\n</code></pre> <p>Or if you already in the created folder just the filename</p> <pre><code>[adm1schmidtjon@HAMS010784]$ git add install_iis.yml\n</code></pre> <p>Commit the change with a short message. This message is intended to describe the changes you made so that others (including yourself) better understand what is changing when comparing versions.</p> <pre><code>[adm1schmidtjon@HAMS010784]$ git commit -m \"Adding install_iis.yml playbook.\"\n</code></pre> <p>Now you need to push the committed changes to your repository.</p> <pre><code>[adm1schmidtjon@HAMS010784]$ git push\n</code></pre> <p>Click the Source Code icon as shown below (It is the middle on the far left of the page that has the blue circle with # 1 in it)</p> <p></p> <p>Type in a commit message such as Adding install_iis.yml in the text box at the top of the sidebar. Click the check box above to commit. This message is intended to describe the changes you made so that others (including yourself) better understand what is changing when comparing versions.</p> <p></p> <p>Now you need to push the committed changes to your repository.</p> <p>On the bottom left blue bar, click the section that contains the circular arrows to push the changes.</p> <p></p> <p>This may take as long as 30 seconds to push. After your first push, you may get a pop-up message asking if you would like to periodically run git fetch. Because you\u2019re the only one working on the git repo, you can click Yes or No.</p> <p></p> <p>If you\u2019re interested in validating the code is in git, you can connect to Azure DevOps to verify.</p> <p>You are ready to automate!</p> <p>Note</p> <p>Ansible (well, YAML really) can be a bit particular about formatting especially around indentation/spacing. The Ansible documentation has describe the YAML Syntax a bit more and it will save you some headaches later. In the meantime, your completed playbook should look like this. Take note of the spacing and alignment.</p> <pre><code>---\n- name: Install the iis web service\nhosts: windows\ntasks:\n- name: Install iis\nansible.windows.win_feature:\nname: Web-Server\nstate: present\n- name: Start iis service\nansible.windows.win_service:\nname: W3Svc\nstate: started\n- name: Create website index.html\nansible.windows.win_copy:\ncontent: \"{{ iis_test_message }}\"\ndest: C:\\Inetpub\\wwwroot\\index.html\n- name: Show website address\nansible.builtin.debug:\nmsg: \"Open an RDP session and open http://{{ ansible_host }} in a browser.\"\n</code></pre>"},{"location":"windows-automation/windows-project/","title":"3 - Sync Project to AAP","text":"<p>A job template in AAP is a definition and set of parameters for running an Ansible job. Job templates are useful to execute the same job many times. Before you can create a job template with a new playbook, you must first sync your Project so that Controller knows about it.  </p>"},{"location":"windows-automation/windows-project/#create-project","title":"Create Project","text":"<p>We already have created a project and pushed it to our remote Git host (Azure DevOps). Let's create a project which is logical collection of Ansible playbooks, stored in a (remote) single source of truth.</p> <p>Click Projects and then the  icon.</p> <p>Complete the form using the following values, replace username with your username abbreviation:</p> Key Value Name Ansible Workshop Project username Description Workshop Project for username Organization Choose your organization Execution Environment BSS EE - Windows Source Control Type Git <p>Now, the form changes, input the following values:</p> Key Value Note Source Control URL https://... Input your HTTPS Git URL Source Control Credentials Azure DevOps username Choose your Git credential Options  Update Revision on Launch <p>Click SAVE . Your project should sync automatically, otherwise click Projects and then click the sync icon next to your project. Once this is complete, you can create the job template.</p> <p></p>"},{"location":"windows-automation/windows-project/#create-job-template","title":"Create Job Template","text":"<p>Select Templates.  </p> <p>Click the  icon, and select Job Template.</p> <p>Complete the form using the following values, replace username with your username abbreviation:</p> <p>Danger</p> <p>Your playbook targets the <code>windows</code> group. We have all test hosts in the inventory <code>Workshop Example CC</code>, you must place a limit on your job template! If you target the complete windows group, you will automate all hosts, even those of your colleagues!</p> Key Value Notes Name IIS Basic Job Template username Description Template for the iis-basic playbook Job Type Run Inventory Workshop Inventory Project Ansible Workshop Project username Execution Environment BSS EE - Windows Playbook <code>iis_basic/install_iis.yml</code> Credentials Windows Test Host username Limit Your single host as in your local inventory! Do not target the windows group! Options  Enable Fact Storage <p></p> <p>Danger</p> <p>Did you set the <code>limit</code>?</p> <p>Click SAVE .</p>"},{"location":"windows-automation/windows-project/#add-survey","title":"Add Survey","text":"<p>On the resulting page, select the Survey tab and press the Add button </p> <p>Complete the survey form with following values</p> Key Value Note QUESTION Please enter a test message for your new website DESCRIPTION Website test message prompt ANSWER VARIABLE NAME <code>iis_test_message</code> ANSWER TYPE Text MINIMUM/MAXIMUM LENGTH Use the defaults DEFAULT ANSWER Be creative, keep it clean, we\u2019re all professionals here <p>After configuring your survey, click Save. On the resulting page, turn on the survey you just created.</p> <p></p> <p>Tip</p> <p>You need to activate your survey with the slider!</p> The playbook failed locally, what now? <p>Remember that your playbook did not run successful on the command-line because of a undefined variable? In the survey above we defined a default value for the variable, you could do this locally as well.</p>"},{"location":"windows-automation/windows-project/#running-job-template","title":"Running Job Template","text":"<p>Now that you\u2019ve successfully created your Job Template, you are ready to launch it. Once you do, you will be redirected to a job screen which is refreshing in real time showing you the status of the job.</p> <p>Select TEMPLATES and Click the rocketship icon  for the IIS Basic Job Template</p> <p>When prompted, enter your desired test message</p> <p></p> <p>Select NEXT and preview the inputs.</p> <p>Select LAUNCH </p> <p>Sit back, watch the magic happen.</p> <p>Once again you should be presented with a Job log page. Selecting the Details tab should show you the variable you passed into the playbook among other details.</p> <p></p> <p>Next you will be able to see details on the play and each task in the playbook.</p> <p></p> <p>When the job has successfully completed, the last task tells us what to do. Connect with RDP to the node, open a browser and input <code>http://localhost</code>.</p> <p>If all went well, you should see something like this, but with your own custom message of course.</p> <p></p> <p>Note</p> <p>As these are test hosts only, the firewall does not allow external access to the webserver, therefor we need to check this locally.</p>"},{"location":"windows-automation/windows-project/#optional","title":"Optional","text":"<p>Now that you have IIS Installed, create a new playbook called remove_iis.yml to stop and remove IIS.</p> <p>Hint</p> <p>First stop the <code>W3Svc</code> service using the <code>win_service</code> module, then delete the <code>Web-Server</code> service using the<code>win_feature</code> module. Optionally, use the <code>win_file</code> module to delete the index page.</p> Solution needed? <p>This playbook stops and removes the IIS service.</p> <pre><code>---\n- name: Remove the IIS web service\nhosts: windows\ntasks:\n- name: Stop IIS service\nansible.windows.win_service:\nname: W3Svc\nstate: stopped\n- name: Uninstall IIS\nansible.windows.win_feature:\nname: Web-Server\nstate: absent\n- name: Remove website index.html\nansible.windows.win_file:\npath: C:\\Inetpub\\wwwroot\\index.html\nstate: absent\n</code></pre>"},{"location":"windows-automation/windows-project/#end-result","title":"End Result","text":"<p>At this point in the workshop, you\u2019ve experienced the core functionality of Automation Controller. But wait\u2026 there\u2019s more! You\u2019ve just begun to explore the possibilities of Automation Controller. The next few lessons will help you move beyond a basic playbook.</p>"},{"location":"windows-automation/windows-roles/","title":"6 - Roles","text":"<p>Although it is possible to write a playbook in one file as we\u2019ve done throughout this workshop, eventually you\u2019ll want to reuse files and start to organize things.</p> <p>Ansible Roles are the way we do this. When you create a role, you deconstruct your playbook into parts and those parts sit in a directory structure. This is considered best practice and will save you a lot of time in the future.</p> <p>For this exercise, you are going to take the playbook you just wrote and refactor it into a role.</p> <p>Let\u2019s begin with seeing how your iis-basic-playbook will break down into a role\u2026</p>"},{"location":"windows-automation/windows-roles/#step-1-create-directory-structure","title":"Step 1 - Create directory structure","text":"<p>In Visual Studio Code, navigate to explorer and your WORKSHOP_PROJECT section where you previously made <code>iis_advanced</code>.</p> <p></p> <p>Select the iis_advanced folder.</p> <p>Create a directory called roles by right-clicking on iis_advanced and selecting New Folder.</p> <p>Now right-click roles and create a new folder underneath called <code>iis_simple</code>.</p> <p>Within iis_simple create new folders as follows:</p> <ul> <li>defaults</li> <li>vars</li> <li>handlers</li> <li>tasks</li> <li>templates</li> </ul> <p>Within each of these new folders (except templates), right-click and create New File Create a file called <code>main.yml</code> in each of these folders. You will not do this under templates as we will create individual template files. This is your basic role structure and main.yml will be the default file that the role will use for each section.</p> <p>The finished structure will look like this:</p> <p></p> <p>Tip</p> <p>You can let Ansible create the directory structure for you! Run the following command for a complete role skeleton:</p> <pre><code>ansible-galaxy role init roles/iis_simple\n</code></pre>"},{"location":"windows-automation/windows-roles/#step-2-refactor-playbook","title":"Step 2 - Refactor playbook","text":"<p>In this section, we will separate out the major parts of your playbook including <code>vars:</code>, <code>tasks:</code>, <code>template:</code>, and <code>handlers:</code>.</p> <p>Make a backup copy of <code>site.yml</code>, then create a new <code>site.yml</code>.</p> <p>Navigate to your <code>iis_advanced</code> folder, right click <code>site.yml</code>, click <code>rename</code>, and call it <code>site.yml.backup</code></p> <p>Create a blank new file called <code>site.yml</code> in the same folder</p> <p>Update <code>site.yml</code> to look like to only call your role. It should look like below:</p> <pre><code>    ---\n- name: This is my role-based playbook\nhosts: windows\nroles:\n- iis_simple\n</code></pre> <p></p>"},{"location":"windows-automation/windows-roles/#step-3-move-variables-to-role","title":"Step 3 - Move variables to role","text":"<p>Add a default variable to your role. Edit the <code>roles\\iis_simple\\defaults\\main.yml</code> as follows:</p> <pre><code>---\n# defaults file for iis_simple\niis_sites:\n- name: 'Ansible Playbook Test'\nport: '8080'\npath: 'C:\\sites\\playbooktest'\n- name: 'Ansible Playbook Test 2'\nport: '8081'\npath: 'C:\\sites\\playbooktest2'\n</code></pre> <p>Add some role-specific variables to your role in <code>roles\\iis_simple\\vars\\main.yml</code>.</p> <pre><code>---\n# vars file for iis_simple\niis_test_message: \"Hello World!  My test IIS Server\"\n</code></pre> <p>Hey, wait\u2026 did we just put variables in two seperate places?</p> <p>Yes\u2026 yes we did. Variables can live in quite a few places. Just to name a few:</p> <ul> <li>vars directory</li> <li>defaults directory</li> <li>group_vars directory</li> <li>In the playbook under the <code>vars:</code> section</li> <li>In any file which can be specified on the command line using the   <code>--extra_vars</code> option</li> <li>On a boat, in a moat, with a goat (disclaimer: this is a complete lie)</li> </ul> <p>Bottom line, you need to read up on variable precedence to understand both where to define variables and which locations take precedence. In this exercise, we are using role defaults to define a couple of variables and these are the most malleable. After that, we defined some variables in <code>/vars</code> which have a higher precedence than defaults and can\u2019t be overridden as a default variable.</p>"},{"location":"windows-automation/windows-roles/#step-4-create-handler","title":"Step 4 - Create handler","text":"<p>Create your role handler in <code>roles\\iis_simple\\handlers\\main.yml</code>.</p> <pre><code>---\n# handlers file for iis_simple\n- name: restart iis service\nansible.windows.win_service:\nname: W3Svc\nstate: restarted\nstart_mode: auto\n</code></pre>"},{"location":"windows-automation/windows-roles/#step-5-add-tasks","title":"Step 5 - Add tasks","text":"<p>Add tasks to your role in <code>roles\\iis_simple\\tasks\\main.yml</code>.</p> <pre><code>---\n# tasks file for iis_simple\n- name: Install IIS\nansible.windows.win_feature:\nname: Web-Server\nstate: present\n- name: Create site directory structure\nansible.windows.win_file:\npath: \"{{ item.path }}\"\nstate: directory\nloop: \"{{ iis_sites }}\"\n- name: Create IIS site\nansible.windows.win_iis_website:\nname: \"{{ item.name }}\"\nstate: started\nport: \"{{ item.port }}\"\nphysical_path: \"{{ item.path }}\"\nloop: \"{{ iis_sites }}\"\nnotify: restart iis service\n- name: Open port for site on the firewall\nansible.windows.win_firewall_rule:\nname: \"iisport{{ item.port }}\"\nenable: yes\nstate: present\nlocalport: \"{{ item.port }}\"\naction: Allow\ndirection: In\nprotocol: Tcp\nloop: \"{{ iis_sites }}\"\n- name: Template simple web site to iis_site_path as index.html\nansible.windows.win_template:\nsrc: 'index.html.j2'\ndest: '{{ item.path }}\\index.html'\nloop: \"{{ iis_sites }}\"\n- name: Show website addresses\nansible.builtin.debug:\nmsg: \"{{ item }}\"\nloop:\n- http://{{ ansible_host }}:8080\n- http://{{ ansible_host }}:8081\n</code></pre> More separation is also possible <p>It is even better to split up the tasks into separate task files and import them in the <code>main.yml</code> of your <code>tasks</code> folder. The following is only an example on how to split, it is up to you to find a meaningful separation. Always remember, shorter is better, but logically connected tasks should be kept alongside.</p> tasks/main.yml<pre><code>---\n# tasks file for iis_simple\n- import_tasks: installation.yml\n- import_tasks: firewall.yml\n- import_tasks: configuration.yml\n</code></pre> tasks/installation.yml<pre><code>---\n# tasks file for iis_simple\n- name: Install IIS\nansible.windows.win_feature:\nname: Web-Server\nstate: present\n</code></pre> tasks/firewall.yml<pre><code>---\n# tasks file for iis_simple\n- name: Open port for site on the firewall\nansible.windows.win_firewall_rule:\nname: \"iisport{{ item.port }}\"\nenable: yes\nstate: present\nlocalport: \"{{ item.port }}\"\naction: Allow\ndirection: In\nprotocol: Tcp\nloop: \"{{ iis_sites }}\"\n</code></pre> tasks/configuration.yml<pre><code>---\n# tasks file for iis_simple\n- name: Create site directory structure\nansible.windows.win_file:\npath: \"{{ item.path }}\"\nstate: directory\nloop: \"{{ iis_sites }}\"\n- name: Create IIS site\nansible.windows.win_iis_website:\nname: \"{{ item.name }}\"\nstate: started\nport: \"{{ item.port }}\"\nphysical_path: \"{{ item.path }}\"\nloop: \"{{ iis_sites }}\"\nnotify: restart iis service\n- name: Template simple web site to iis_site_path as index.html\nansible.windows.win_template:\nsrc: 'index.html.j2'\ndest: '{{ item.path }}\\index.html'\nloop: \"{{ iis_sites }}\"\n- name: Show website addresses\nansible.builtin.debug:\nmsg: \"{{ item }}\"\nloop:\n- http://{{ ansible_host }}:8080\n- http://{{ ansible_host }}:8081\n</code></pre>"},{"location":"windows-automation/windows-roles/#step-6-add-template","title":"Step 6 - Add template","text":"<p>Add your <code>index.html</code> template.</p> <p>Right-click <code>roles\\iis_simple\\templates</code> and create a new file called <code>index.html.j2</code> with the following content:</p> <pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;p align=center&gt;&lt;img src='http://docs.ansible.com/images/logo.png' align=center&gt;\n&lt;h1 align=center&gt;{{ ansible_hostname }} --- {{ iis_test_message }}&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Now, remember we still have a templates folder at the base level of this playbook, so we will delete that now. Right click it and Select Delete.</p>"},{"location":"windows-automation/windows-roles/#step-6-commit","title":"Step 6 - Commit","text":"<p>Click <code>File</code> <code>Save All</code> to ensure all your files are saved.</p> <p>Click the Source Code icon as shown below (1).</p> <p>Type in a commit message like <code>Adding iis_simple role</code> (2) and click the check box above (3).</p> <p></p> <p>Click the <code>synchronize changes</code> button on the blue bar at the bottom left. This should again return with no problems.</p>"},{"location":"windows-automation/windows-roles/#step-8-run-new-playbook","title":"Step 8 - Run new playbook","text":"<p>Now that you\u2019ve successfully separated your original playbook into a role, let\u2019s run it and see how it works. We don\u2019t need to create a new template, as we are re-using the one from Exercise 5. When we run the template again, it will automatically refresh from git and launch our new role.</p> <p>Before we can modify our Job Template, you must first go resync your Project again. So do that now.</p> <p>Select TEMPLATES</p> <p>Tip</p> <p>Alternatively, if you haven\u2019t navigated away from the job templates creation page, you can scroll down to see all existing job templates.</p> <p>Click the rocketship icon  for the IIS Advanced Job Template.</p> <p>When prompted, enter your desired test message.</p> <p>If successful, your standard output should look similar to the figure below. Note that most of the tasks return OK because we\u2019ve previously configured the servers and services are already running.</p> <p></p> <p>When the job has successfully completed, you should see two URLs to your websites printed at the bottom of the job output. Verify they are still working.</p>"},{"location":"windows-automation/windows-roles/#review","title":"Review","text":"<p>You should now have a completed playbook, <code>site.yml</code> with a single role called <code>iis_simple</code>. The advantage of structuring your playbook into roles is that you can now add reusability to your playbooks as well as simplifying changes to variables, tasks, templates, etc.</p> <p>Ansible Galaxy is a good repository of roles for use or reference.</p>"}]}